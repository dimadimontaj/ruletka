// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package http

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	WebhookSigScopes = "webhookSig.Scopes"
)

// Defines values for CaseDetailsStatus.
const (
	CaseDetailsStatusActive CaseDetailsStatus = "active"
	CaseDetailsStatusDraft  CaseDetailsStatus = "draft"
)

// Defines values for CaseInputStatus.
const (
	CaseInputStatusActive CaseInputStatus = "active"
	CaseInputStatusDraft  CaseInputStatus = "draft"
)

// Defines values for CaseMetaUpdateStatus.
const (
	CaseMetaUpdateStatusActive CaseMetaUpdateStatus = "active"
	CaseMetaUpdateStatusDraft  CaseMetaUpdateStatus = "draft"
)

// Defines values for CaseSummaryStatus.
const (
	CaseSummaryStatusActive CaseSummaryStatus = "active"
	CaseSummaryStatusDraft  CaseSummaryStatus = "draft"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBotPayments   PaymentProvider = "bot_payments"
	PaymentProviderTelegramStars PaymentProvider = "telegram_stars"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusFailed    PaymentStatus = "failed"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusSucceeded PaymentStatus = "succeeded"
)

// Defines values for Rarity.
const (
	RarityCommon    Rarity = "common"
	RarityEpic      Rarity = "epic"
	RarityLegendary Rarity = "legendary"
	RarityRare      Rarity = "rare"
	RarityUncommon  Rarity = "uncommon"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken JWT токен доступа
	AccessToken  *string      `json:"access_token,omitempty"`
	Balance      *Balance     `json:"balance,omitempty"`
	RefreshToken *string      `json:"refresh_token,omitempty"`
	User         *UserProfile `json:"user,omitempty"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins *int `json:"coins,omitempty"`

	// Dust Опциональная внутренняя валюта за дубликаты
	Dust *int `json:"dust,omitempty"`
}

// CaseDetails defines model for CaseDetails.
type CaseDetails struct {
	Description *string `json:"description,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	Id          *string `json:"id,omitempty"`

	// ItemsPreview Превью пула предметов (без точных весов)
	ItemsPreview *[]Item `json:"items_preview,omitempty"`

	// PityEnabled Флаг для будущей «мини‑гарантии»
	PityEnabled *bool `json:"pity_enabled,omitempty"`
	PriceCoins  *int  `json:"price_coins,omitempty"`

	// RarityChances Сумма процентов может быть < 100 из-за округления.
	RarityChances *map[string]float32 `json:"rarity_chances,omitempty"`
	Status        *CaseDetailsStatus  `json:"status,omitempty"`
	Title         *string             `json:"title,omitempty"`

	// Version Версия дроп‑таблицы
	Version *int `json:"version,omitempty"`
}

// CaseDetailsStatus defines model for CaseDetails.Status.
type CaseDetailsStatus string

// CaseDropWeightsInput Весовая таблица предметов. Веса нормализуются сервером; создается новая версия.
type CaseDropWeightsInput struct {
	Items []struct {
		ItemId string `json:"item_id"`
		Weight int    `json:"weight"`
	} `json:"items"`
}

// CaseInput defines model for CaseInput.
type CaseInput struct {
	Description   *string             `json:"description,omitempty"`
	Icon          *string             `json:"icon,omitempty"`
	PityEnabled   *bool               `json:"pity_enabled,omitempty"`
	PriceCoins    int                 `json:"price_coins"`
	RarityChances *map[string]float32 `json:"rarity_chances,omitempty"`
	Status        CaseInputStatus     `json:"status"`
	Title         string              `json:"title"`
}

// CaseInputStatus defines model for CaseInput.Status.
type CaseInputStatus string

// CaseMetaUpdate Обновление метаданных кейса (без дроп‑таблицы); частичное.
type CaseMetaUpdate struct {
	Description   *string               `json:"description,omitempty"`
	Icon          *string               `json:"icon,omitempty"`
	PityEnabled   *bool                 `json:"pity_enabled,omitempty"`
	PriceCoins    *int                  `json:"price_coins,omitempty"`
	RarityChances *map[string]float32   `json:"rarity_chances,omitempty"`
	Status        *CaseMetaUpdateStatus `json:"status,omitempty"`
	Title         *string               `json:"title,omitempty"`
}

// CaseMetaUpdateStatus defines model for CaseMetaUpdate.Status.
type CaseMetaUpdateStatus string

// CaseSummary defines model for CaseSummary.
type CaseSummary struct {
	Description *string `json:"description,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	Id          *string `json:"id,omitempty"`
	PriceCoins  *int    `json:"price_coins,omitempty"`

	// RarityChances Сумма процентов может быть < 100 из-за округления.
	RarityChances *map[string]float32 `json:"rarity_chances,omitempty"`
	Status        *CaseSummaryStatus  `json:"status,omitempty"`
	Title         *string             `json:"title,omitempty"`
}

// CaseSummaryStatus defines model for CaseSummary.Status.
type CaseSummaryStatus string

// CoinPack defines model for CoinPack.
type CoinPack struct {
	Active     *bool            `json:"active,omitempty"`
	Coins      *int             `json:"coins,omitempty"`
	Id         *string          `json:"id,omitempty"`
	PriceStars *int             `json:"price_stars,omitempty"`
	PriceUsd   *float32         `json:"price_usd,omitempty"`
	Provider   *PaymentProvider `json:"provider,omitempty"`
}

// Drop defines model for Drop.
type Drop struct {
	BatchSeedHash *string    `json:"batch_seed_hash,omitempty"`
	CaseId        *string    `json:"case_id,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Item          *Item      `json:"item,omitempty"`
	Rarity        *Rarity    `json:"rarity,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Error Код ошибки
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	TraceId *string `json:"trace_id,omitempty"`
}

// InventoryItem defines model for InventoryItem.
type InventoryItem struct {
	Item         *Item      `json:"item,omitempty"`
	ObtainedAt   *time.Time `json:"obtained_at,omitempty"`
	Qty          *int       `json:"qty,omitempty"`
	SourceDropId *string    `json:"source_drop_id,omitempty"`
}

// Item defines model for Item.
type Item struct {
	Available *bool   `json:"available,omitempty"`
	Id        *string `json:"id,omitempty"`
	Image     *string `json:"image,omitempty"`
	Name      *string `json:"name,omitempty"`
	Rarity    *Rarity `json:"rarity,omitempty"`
	Set       *string `json:"set,omitempty"`
}

// ItemInput defines model for ItemInput.
type ItemInput struct {
	Available *bool   `json:"available,omitempty"`
	Image     string  `json:"image"`
	Name      string  `json:"name"`
	Rarity    Rarity  `json:"rarity"`
	Set       *string `json:"set,omitempty"`
}

// ItemUpdate defines model for ItemUpdate.
type ItemUpdate = ItemInput

// MeResponse defines model for MeResponse.
type MeResponse struct {
	Balance *Balance `json:"balance,omitempty"`
	Stats   *struct {
		DropsTotal *int `json:"drops_total,omitempty"`

		// DuplicatesRatio Коэффициент дубликатов (0..1)
		DuplicatesRatio *float32 `json:"duplicates_ratio,omitempty"`
	} `json:"stats,omitempty"`
	User *UserProfile `json:"user,omitempty"`
}

// OpenCaseResponse defines model for OpenCaseResponse.
type OpenCaseResponse struct {
	Balance *Balance `json:"balance,omitempty"`

	// BatchSeedHash Опциональный хэш сида для прозрачности RNG
	BatchSeedHash *string `json:"batch_seed_hash,omitempty"`
	DropId        *string `json:"drop_id,omitempty"`
	Item          *Item   `json:"item,omitempty"`
}

// PaymentProvider defines model for PaymentProvider.
type PaymentProvider string

// PaymentSession defines model for PaymentSession.
type PaymentSession struct {
	AmountCoins    *int             `json:"amount_coins,omitempty"`
	CreatedAt      *time.Time       `json:"created_at,omitempty"`
	DeepLink       *string          `json:"deep_link,omitempty"`
	InvoicePayload *string          `json:"invoice_payload,omitempty"`
	PaymentId      *string          `json:"payment_id,omitempty"`
	Provider       *PaymentProvider `json:"provider,omitempty"`
	Status         *PaymentStatus   `json:"status,omitempty"`
}

// PaymentStatus defines model for PaymentStatus.
type PaymentStatus string

// PaymentWebhookEvent defines model for PaymentWebhookEvent.
type PaymentWebhookEvent struct {
	// Amount Сумма в минимальных единицах провайдера
	Amount *int `json:"amount,omitempty"`

	// Currency Валюта провайдера (например, XTR для Stars)
	Currency          *string                 `json:"currency,omitempty"`
	ExternalPaymentId *string                 `json:"external_payment_id,omitempty"`
	Metadata          *map[string]interface{} `json:"metadata,omitempty"`
	Provider          *PaymentProvider        `json:"provider,omitempty"`

	// Signature Подпись провайдера (дублируется в заголовке для удобства)
	Signature *string        `json:"signature,omitempty"`
	Status    *PaymentStatus `json:"status,omitempty"`
}

// Rarity defines model for Rarity.
type Rarity string

// UserProfile defines model for UserProfile.
type UserProfile struct {
	AvatarUrl    *string    `json:"avatar_url,omitempty"`
	Banned       *bool      `json:"banned,omitempty"`
	Country      *string    `json:"country,omitempty"`
	Language     *string    `json:"language,omitempty"`
	RegisteredAt *time.Time `json:"registered_at,omitempty"`

	// UserId Внешний ключ — Telegram user_id
	UserId   *string `json:"user_id,omitempty"`
	Username *string `json:"username,omitempty"`
}

// CaseId defines model for CaseId.
type CaseId = string

// CaseIdQuery defines model for CaseIdQuery.
type CaseIdQuery = string

// IdempotencyKey defines model for IdempotencyKey.
type IdempotencyKey = string

// PageLimit defines model for PageLimit.
type PageLimit = int

// PageOffset defines model for PageOffset.
type PageOffset = int

// UserId defines model for UserId.
type UserId = string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// PostAdminBalanceAdjustJSONBody defines parameters for PostAdminBalanceAdjust.
type PostAdminBalanceAdjustJSONBody struct {
	// Amount Положительное или отрицательное значение в монетах
	Amount         int     `json:"amount"`
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	Reason         string  `json:"reason"`
	UserId         string  `json:"user_id"`
}

// PutAdminCasesParams defines parameters for PutAdminCases.
type PutAdminCasesParams struct {
	CaseId CaseIdQuery `form:"case_id" json:"case_id"`
}

// PutAdminItemsParams defines parameters for PutAdminItems.
type PutAdminItemsParams struct {
	ItemId string `form:"item_id" json:"item_id"`
}

// PostAdminPromosJSONBody defines parameters for PostAdminPromos.
type PostAdminPromosJSONBody struct {
	Amount         int        `json:"amount"`
	Code           string     `json:"code"`
	ExpiresAt      *time.Time `json:"expires_at,omitempty"`
	MaxRedemptions *int       `json:"max_redemptions,omitempty"`
}

// PostAdminUsersUserIdBanJSONBody defines parameters for PostAdminUsersUserIdBan.
type PostAdminUsersUserIdBanJSONBody struct {
	Reason *string `json:"reason,omitempty"`

	// Until Необязательно. Дата окончания бана (если временный).
	Until *time.Time `json:"until,omitempty"`
}

// PostAuthTelegramJSONBody defines parameters for PostAuthTelegram.
type PostAuthTelegramJSONBody struct {
	// DeviceFingerprint Необязательно. Хэш устройства/сессии для анти‑фрод логики.
	DeviceFingerprint *string `json:"device_fingerprint,omitempty"`

	// InitData Строка initData из Telegram Web Apps (URL-encoded), как есть.
	InitData string `json:"init_data"`
}

// GetCasesParams defines parameters for GetCases.
type GetCasesParams struct {
	// Limit Размер страницы
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Смещение
	Offset *PageOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostCasesCaseIdOpenParams defines parameters for PostCasesCaseIdOpen.
type PostCasesCaseIdOpenParams struct {
	// IdempotencyKey Уникальный ключ операции для идемпотентности
	IdempotencyKey IdempotencyKey `json:"Idempotency-Key"`
}

// GetDropsMyParams defines parameters for GetDropsMy.
type GetDropsMyParams struct {
	// Limit Количество последних дропов (до 50)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetInventoryParams defines parameters for GetInventory.
type GetInventoryParams struct {
	// Rarity Фильтр по редкости
	Rarity *Rarity `form:"rarity,omitempty" json:"rarity,omitempty"`

	// Set Фильтр по набору/сету
	Set *string `form:"set,omitempty" json:"set,omitempty"`

	// Search Поиск по имени
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostInventoryDisenchantJSONBody defines parameters for PostInventoryDisenchant.
type PostInventoryDisenchantJSONBody struct {
	ItemId string `json:"item_id"`
	Qty    int    `json:"qty"`
}

// PostInventoryDisenchantParams defines parameters for PostInventoryDisenchant.
type PostInventoryDisenchantParams struct {
	// IdempotencyKey Уникальный ключ операции для идемпотентности
	IdempotencyKey IdempotencyKey `json:"Idempotency-Key"`
}

// PostPaymentsCreateJSONBody defines parameters for PostPaymentsCreate.
type PostPaymentsCreateJSONBody struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// PackId Идентификатор пакета монет
	PackId   string          `json:"pack_id"`
	Provider PaymentProvider `json:"provider"`
}

// PostPaymentsCreateParams defines parameters for PostPaymentsCreate.
type PostPaymentsCreateParams struct {
	// IdempotencyKey Уникальный ключ операции для идемпотентности
	IdempotencyKey IdempotencyKey `json:"Idempotency-Key"`
}

// PostAdminBalanceAdjustJSONRequestBody defines body for PostAdminBalanceAdjust for application/json ContentType.
type PostAdminBalanceAdjustJSONRequestBody PostAdminBalanceAdjustJSONBody

// PostAdminCasesJSONRequestBody defines body for PostAdminCases for application/json ContentType.
type PostAdminCasesJSONRequestBody = CaseInput

// PutAdminCasesJSONRequestBody defines body for PutAdminCases for application/json ContentType.
type PutAdminCasesJSONRequestBody = CaseMetaUpdate

// PostAdminCasesCaseIdWeightsJSONRequestBody defines body for PostAdminCasesCaseIdWeights for application/json ContentType.
type PostAdminCasesCaseIdWeightsJSONRequestBody = CaseDropWeightsInput

// PostAdminItemsJSONRequestBody defines body for PostAdminItems for application/json ContentType.
type PostAdminItemsJSONRequestBody = ItemInput

// PutAdminItemsJSONRequestBody defines body for PutAdminItems for application/json ContentType.
type PutAdminItemsJSONRequestBody = ItemUpdate

// PostAdminPromosJSONRequestBody defines body for PostAdminPromos for application/json ContentType.
type PostAdminPromosJSONRequestBody PostAdminPromosJSONBody

// PostAdminUsersUserIdBanJSONRequestBody defines body for PostAdminUsersUserIdBan for application/json ContentType.
type PostAdminUsersUserIdBanJSONRequestBody PostAdminUsersUserIdBanJSONBody

// PostAuthTelegramJSONRequestBody defines body for PostAuthTelegram for application/json ContentType.
type PostAuthTelegramJSONRequestBody PostAuthTelegramJSONBody

// PostInventoryDisenchantJSONRequestBody defines body for PostInventoryDisenchant for application/json ContentType.
type PostInventoryDisenchantJSONRequestBody PostInventoryDisenchantJSONBody

// PostPaymentsCreateJSONRequestBody defines body for PostPaymentsCreate for application/json ContentType.
type PostPaymentsCreateJSONRequestBody PostPaymentsCreateJSONBody

// PostPaymentsWebhookJSONRequestBody defines body for PostPaymentsWebhook for application/json ContentType.
type PostPaymentsWebhookJSONRequestBody = PaymentWebhookEvent

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Ручная корректировка баланса
	// (POST /admin/balance/adjust)
	PostAdminBalanceAdjust(w http.ResponseWriter, r *http.Request)
	// Создать кейс (draft)
	// (POST /admin/cases)
	PostAdminCases(w http.ResponseWriter, r *http.Request)
	// Обновить метаданные кейса (без дроп‑таблицы)
	// (PUT /admin/cases)
	PutAdminCases(w http.ResponseWriter, r *http.Request, params PutAdminCasesParams)
	// Создать новую версию дроп‑таблицы кейса
	// (POST /admin/cases/{case_id}/weights)
	PostAdminCasesCaseIdWeights(w http.ResponseWriter, r *http.Request, caseId CaseId)
	// Создать предмет (стикер)
	// (POST /admin/items)
	PostAdminItems(w http.ResponseWriter, r *http.Request)
	// Обновить предмет
	// (PUT /admin/items)
	PutAdminItems(w http.ResponseWriter, r *http.Request, params PutAdminItemsParams)
	// Создать промокод (однократное начисление)
	// (POST /admin/promos)
	PostAdminPromos(w http.ResponseWriter, r *http.Request)
	// Бан/заморозка пользователя
	// (POST /admin/users/{user_id}/ban)
	PostAdminUsersUserIdBan(w http.ResponseWriter, r *http.Request, userId UserId)
	// Снять бан/разморозить пользователя
	// (POST /admin/users/{user_id}/unban)
	PostAdminUsersUserIdUnban(w http.ResponseWriter, r *http.Request, userId UserId)
	// Авторизация по Telegram Web Apps init_data
	// (POST /auth/telegram)
	PostAuthTelegram(w http.ResponseWriter, r *http.Request)
	// Список активных кейсов
	// (GET /cases)
	GetCases(w http.ResponseWriter, r *http.Request, params GetCasesParams)
	// Детали кейса (без точных весов предметов)
	// (GET /cases/{case_id})
	GetCasesCaseId(w http.ResponseWriter, r *http.Request, caseId CaseId)
	// Открыть кейс (идемпотентно)
	// (POST /cases/{case_id}/open)
	PostCasesCaseIdOpen(w http.ResponseWriter, r *http.Request, caseId CaseId, params PostCasesCaseIdOpenParams)
	// Мои последние дропы
	// (GET /drops/my)
	GetDropsMy(w http.ResponseWriter, r *http.Request, params GetDropsMyParams)
	// Проверка статуса сервиса
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Инвентарь пользователя
	// (GET /inventory)
	GetInventory(w http.ResponseWriter, r *http.Request, params GetInventoryParams)
	// Конвертация дубликатов в «пыль» (опциональная механика)
	// (POST /inventory/disenchant)
	PostInventoryDisenchant(w http.ResponseWriter, r *http.Request, params PostInventoryDisenchantParams)
	// Текущий пользователь — профиль, баланс и краткая статистика
	// (GET /me)
	GetMe(w http.ResponseWriter, r *http.Request)
	// Создать платежную сессию
	// (POST /payments/create)
	PostPaymentsCreate(w http.ResponseWriter, r *http.Request, params PostPaymentsCreateParams)
	// Вебхук платежного провайдера
	// (POST /payments/webhook)
	PostPaymentsWebhook(w http.ResponseWriter, r *http.Request)
	// Каталог пакетов монет
	// (GET /shop/packs)
	GetShopPacks(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Ручная корректировка баланса
// (POST /admin/balance/adjust)
func (_ Unimplemented) PostAdminBalanceAdjust(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать кейс (draft)
// (POST /admin/cases)
func (_ Unimplemented) PostAdminCases(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновить метаданные кейса (без дроп‑таблицы)
// (PUT /admin/cases)
func (_ Unimplemented) PutAdminCases(w http.ResponseWriter, r *http.Request, params PutAdminCasesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новую версию дроп‑таблицы кейса
// (POST /admin/cases/{case_id}/weights)
func (_ Unimplemented) PostAdminCasesCaseIdWeights(w http.ResponseWriter, r *http.Request, caseId CaseId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать предмет (стикер)
// (POST /admin/items)
func (_ Unimplemented) PostAdminItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновить предмет
// (PUT /admin/items)
func (_ Unimplemented) PutAdminItems(w http.ResponseWriter, r *http.Request, params PutAdminItemsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать промокод (однократное начисление)
// (POST /admin/promos)
func (_ Unimplemented) PostAdminPromos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Бан/заморозка пользователя
// (POST /admin/users/{user_id}/ban)
func (_ Unimplemented) PostAdminUsersUserIdBan(w http.ResponseWriter, r *http.Request, userId UserId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Снять бан/разморозить пользователя
// (POST /admin/users/{user_id}/unban)
func (_ Unimplemented) PostAdminUsersUserIdUnban(w http.ResponseWriter, r *http.Request, userId UserId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Авторизация по Telegram Web Apps init_data
// (POST /auth/telegram)
func (_ Unimplemented) PostAuthTelegram(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список активных кейсов
// (GET /cases)
func (_ Unimplemented) GetCases(w http.ResponseWriter, r *http.Request, params GetCasesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Детали кейса (без точных весов предметов)
// (GET /cases/{case_id})
func (_ Unimplemented) GetCasesCaseId(w http.ResponseWriter, r *http.Request, caseId CaseId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Открыть кейс (идемпотентно)
// (POST /cases/{case_id}/open)
func (_ Unimplemented) PostCasesCaseIdOpen(w http.ResponseWriter, r *http.Request, caseId CaseId, params PostCasesCaseIdOpenParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Мои последние дропы
// (GET /drops/my)
func (_ Unimplemented) GetDropsMy(w http.ResponseWriter, r *http.Request, params GetDropsMyParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Проверка статуса сервиса
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Инвентарь пользователя
// (GET /inventory)
func (_ Unimplemented) GetInventory(w http.ResponseWriter, r *http.Request, params GetInventoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Конвертация дубликатов в «пыль» (опциональная механика)
// (POST /inventory/disenchant)
func (_ Unimplemented) PostInventoryDisenchant(w http.ResponseWriter, r *http.Request, params PostInventoryDisenchantParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Текущий пользователь — профиль, баланс и краткая статистика
// (GET /me)
func (_ Unimplemented) GetMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать платежную сессию
// (POST /payments/create)
func (_ Unimplemented) PostPaymentsCreate(w http.ResponseWriter, r *http.Request, params PostPaymentsCreateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Вебхук платежного провайдера
// (POST /payments/webhook)
func (_ Unimplemented) PostPaymentsWebhook(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Каталог пакетов монет
// (GET /shop/packs)
func (_ Unimplemented) GetShopPacks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAdminBalanceAdjust operation middleware
func (siw *ServerInterfaceWrapper) PostAdminBalanceAdjust(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminBalanceAdjust(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminCases operation middleware
func (siw *ServerInterfaceWrapper) PostAdminCases(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminCases(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAdminCases operation middleware
func (siw *ServerInterfaceWrapper) PutAdminCases(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAdminCasesParams

	// ------------- Required query parameter "case_id" -------------

	if paramValue := r.URL.Query().Get("case_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "case_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "case_id", r.URL.Query(), &params.CaseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "case_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAdminCases(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminCasesCaseIdWeights operation middleware
func (siw *ServerInterfaceWrapper) PostAdminCasesCaseIdWeights(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "case_id" -------------
	var caseId CaseId

	err = runtime.BindStyledParameterWithOptions("simple", "case_id", chi.URLParam(r, "case_id"), &caseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "case_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminCasesCaseIdWeights(w, r, caseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminItems operation middleware
func (siw *ServerInterfaceWrapper) PostAdminItems(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAdminItems operation middleware
func (siw *ServerInterfaceWrapper) PutAdminItems(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAdminItemsParams

	// ------------- Required query parameter "item_id" -------------

	if paramValue := r.URL.Query().Get("item_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "item_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "item_id", r.URL.Query(), &params.ItemId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "item_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAdminItems(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminPromos operation middleware
func (siw *ServerInterfaceWrapper) PostAdminPromos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminPromos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminUsersUserIdBan operation middleware
func (siw *ServerInterfaceWrapper) PostAdminUsersUserIdBan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminUsersUserIdBan(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminUsersUserIdUnban operation middleware
func (siw *ServerInterfaceWrapper) PostAdminUsersUserIdUnban(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminUsersUserIdUnban(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthTelegram operation middleware
func (siw *ServerInterfaceWrapper) PostAuthTelegram(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthTelegram(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCases operation middleware
func (siw *ServerInterfaceWrapper) GetCases(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCasesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCases(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCasesCaseId operation middleware
func (siw *ServerInterfaceWrapper) GetCasesCaseId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "case_id" -------------
	var caseId CaseId

	err = runtime.BindStyledParameterWithOptions("simple", "case_id", chi.URLParam(r, "case_id"), &caseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "case_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCasesCaseId(w, r, caseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCasesCaseIdOpen operation middleware
func (siw *ServerInterfaceWrapper) PostCasesCaseIdOpen(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "case_id" -------------
	var caseId CaseId

	err = runtime.BindStyledParameterWithOptions("simple", "case_id", chi.URLParam(r, "case_id"), &caseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "case_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCasesCaseIdOpenParams

	headers := r.Header

	// ------------- Required header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Idempotency-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Idempotency-Key", Err: err})
			return
		}

		params.IdempotencyKey = IdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter Idempotency-Key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Idempotency-Key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCasesCaseIdOpen(w, r, caseId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDropsMy operation middleware
func (siw *ServerInterfaceWrapper) GetDropsMy(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDropsMyParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDropsMy(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInventory operation middleware
func (siw *ServerInterfaceWrapper) GetInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInventoryParams

	// ------------- Optional query parameter "rarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "rarity", r.URL.Query(), &params.Rarity)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rarity", Err: err})
		return
	}

	// ------------- Optional query parameter "set" -------------

	err = runtime.BindQueryParameter("form", true, false, "set", r.URL.Query(), &params.Set)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "set", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventory(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostInventoryDisenchant operation middleware
func (siw *ServerInterfaceWrapper) PostInventoryDisenchant(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostInventoryDisenchantParams

	headers := r.Header

	// ------------- Required header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Idempotency-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Idempotency-Key", Err: err})
			return
		}

		params.IdempotencyKey = IdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter Idempotency-Key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Idempotency-Key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInventoryDisenchant(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPaymentsCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPaymentsCreate(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPaymentsCreateParams

	headers := r.Header

	// ------------- Required header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKey
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Idempotency-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Idempotency-Key", Err: err})
			return
		}

		params.IdempotencyKey = IdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter Idempotency-Key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Idempotency-Key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPaymentsCreate(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPaymentsWebhook operation middleware
func (siw *ServerInterfaceWrapper) PostPaymentsWebhook(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, WebhookSigScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPaymentsWebhook(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetShopPacks operation middleware
func (siw *ServerInterfaceWrapper) GetShopPacks(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetShopPacks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/balance/adjust", wrapper.PostAdminBalanceAdjust)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/cases", wrapper.PostAdminCases)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/admin/cases", wrapper.PutAdminCases)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/cases/{case_id}/weights", wrapper.PostAdminCasesCaseIdWeights)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/items", wrapper.PostAdminItems)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/admin/items", wrapper.PutAdminItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/promos", wrapper.PostAdminPromos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/users/{user_id}/ban", wrapper.PostAdminUsersUserIdBan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/users/{user_id}/unban", wrapper.PostAdminUsersUserIdUnban)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/telegram", wrapper.PostAuthTelegram)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases", wrapper.GetCases)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases/{case_id}", wrapper.GetCasesCaseId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cases/{case_id}/open", wrapper.PostCasesCaseIdOpen)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/drops/my", wrapper.GetDropsMy)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/inventory", wrapper.GetInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/inventory/disenchant", wrapper.PostInventoryDisenchant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/me", wrapper.GetMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments/create", wrapper.PostPaymentsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments/webhook", wrapper.PostPaymentsWebhook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/shop/packs", wrapper.GetShopPacks)
	})

	return r
}

type BadRequestJSONResponse Error

type ForbiddenJSONResponse Error

type InternalErrorJSONResponse Error

type NotFoundJSONResponse Error

type ServiceUnavailableJSONResponse Error

type TooManyRequestsResponseHeaders struct {
	XRateLimitLimit     int
	XRateLimitRemaining int
	XRateLimitReset     int64
}
type TooManyRequestsJSONResponse struct {
	Body Error

	Headers TooManyRequestsResponseHeaders
}

type UnauthorizedJSONResponse Error

type PostAdminBalanceAdjustRequestObject struct {
	Body *PostAdminBalanceAdjustJSONRequestBody
}

type PostAdminBalanceAdjustResponseObject interface {
	VisitPostAdminBalanceAdjustResponse(w http.ResponseWriter) error
}

type PostAdminBalanceAdjust200JSONResponse Balance

func (response PostAdminBalanceAdjust200JSONResponse) VisitPostAdminBalanceAdjustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminBalanceAdjust401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminBalanceAdjust401JSONResponse) VisitPostAdminBalanceAdjustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminBalanceAdjust403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminBalanceAdjust403JSONResponse) VisitPostAdminBalanceAdjustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminCasesRequestObject struct {
	Body *PostAdminCasesJSONRequestBody
}

type PostAdminCasesResponseObject interface {
	VisitPostAdminCasesResponse(w http.ResponseWriter) error
}

type PostAdminCases201JSONResponse CaseDetails

func (response PostAdminCases201JSONResponse) VisitPostAdminCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminCases401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminCases401JSONResponse) VisitPostAdminCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminCases403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminCases403JSONResponse) VisitPostAdminCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutAdminCasesRequestObject struct {
	Params PutAdminCasesParams
	Body   *PutAdminCasesJSONRequestBody
}

type PutAdminCasesResponseObject interface {
	VisitPutAdminCasesResponse(w http.ResponseWriter) error
}

type PutAdminCases200JSONResponse CaseDetails

func (response PutAdminCases200JSONResponse) VisitPutAdminCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAdminCases401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutAdminCases401JSONResponse) VisitPutAdminCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutAdminCases403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutAdminCases403JSONResponse) VisitPutAdminCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminCasesCaseIdWeightsRequestObject struct {
	CaseId CaseId `json:"case_id"`
	Body   *PostAdminCasesCaseIdWeightsJSONRequestBody
}

type PostAdminCasesCaseIdWeightsResponseObject interface {
	VisitPostAdminCasesCaseIdWeightsResponse(w http.ResponseWriter) error
}

type PostAdminCasesCaseIdWeights201JSONResponse CaseDetails

func (response PostAdminCasesCaseIdWeights201JSONResponse) VisitPostAdminCasesCaseIdWeightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminCasesCaseIdWeights401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminCasesCaseIdWeights401JSONResponse) VisitPostAdminCasesCaseIdWeightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminCasesCaseIdWeights403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminCasesCaseIdWeights403JSONResponse) VisitPostAdminCasesCaseIdWeightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminItemsRequestObject struct {
	Body *PostAdminItemsJSONRequestBody
}

type PostAdminItemsResponseObject interface {
	VisitPostAdminItemsResponse(w http.ResponseWriter) error
}

type PostAdminItems201JSONResponse Item

func (response PostAdminItems201JSONResponse) VisitPostAdminItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminItems401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminItems401JSONResponse) VisitPostAdminItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminItems403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminItems403JSONResponse) VisitPostAdminItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutAdminItemsRequestObject struct {
	Params PutAdminItemsParams
	Body   *PutAdminItemsJSONRequestBody
}

type PutAdminItemsResponseObject interface {
	VisitPutAdminItemsResponse(w http.ResponseWriter) error
}

type PutAdminItems200JSONResponse Item

func (response PutAdminItems200JSONResponse) VisitPutAdminItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAdminItems401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutAdminItems401JSONResponse) VisitPutAdminItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutAdminItems403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutAdminItems403JSONResponse) VisitPutAdminItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminPromosRequestObject struct {
	Body *PostAdminPromosJSONRequestBody
}

type PostAdminPromosResponseObject interface {
	VisitPostAdminPromosResponse(w http.ResponseWriter) error
}

type PostAdminPromos201Response struct {
}

func (response PostAdminPromos201Response) VisitPostAdminPromosResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostAdminPromos401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminPromos401JSONResponse) VisitPostAdminPromosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminPromos403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminPromos403JSONResponse) VisitPostAdminPromosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminUsersUserIdBanRequestObject struct {
	UserId UserId `json:"user_id"`
	Body   *PostAdminUsersUserIdBanJSONRequestBody
}

type PostAdminUsersUserIdBanResponseObject interface {
	VisitPostAdminUsersUserIdBanResponse(w http.ResponseWriter) error
}

type PostAdminUsersUserIdBan200Response struct {
}

func (response PostAdminUsersUserIdBan200Response) VisitPostAdminUsersUserIdBanResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAdminUsersUserIdBan401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminUsersUserIdBan401JSONResponse) VisitPostAdminUsersUserIdBanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminUsersUserIdBan403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminUsersUserIdBan403JSONResponse) VisitPostAdminUsersUserIdBanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminUsersUserIdUnbanRequestObject struct {
	UserId UserId `json:"user_id"`
}

type PostAdminUsersUserIdUnbanResponseObject interface {
	VisitPostAdminUsersUserIdUnbanResponse(w http.ResponseWriter) error
}

type PostAdminUsersUserIdUnban200Response struct {
}

func (response PostAdminUsersUserIdUnban200Response) VisitPostAdminUsersUserIdUnbanResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAdminUsersUserIdUnban401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAdminUsersUserIdUnban401JSONResponse) VisitPostAdminUsersUserIdUnbanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminUsersUserIdUnban403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostAdminUsersUserIdUnban403JSONResponse) VisitPostAdminUsersUserIdUnbanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthTelegramRequestObject struct {
	Body *PostAuthTelegramJSONRequestBody
}

type PostAuthTelegramResponseObject interface {
	VisitPostAuthTelegramResponse(w http.ResponseWriter) error
}

type PostAuthTelegram200ResponseHeaders struct {
	XRateLimitLimit     int
	XRateLimitRemaining int
	XRateLimitReset     int64
}

type PostAuthTelegram200JSONResponse struct {
	Body    AuthResponse
	Headers PostAuthTelegram200ResponseHeaders
}

func (response PostAuthTelegram200JSONResponse) VisitPostAuthTelegramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", fmt.Sprint(response.Headers.XRateLimitLimit))
	w.Header().Set("X-RateLimit-Remaining", fmt.Sprint(response.Headers.XRateLimitRemaining))
	w.Header().Set("X-RateLimit-Reset", fmt.Sprint(response.Headers.XRateLimitReset))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthTelegram400JSONResponse struct{ BadRequestJSONResponse }

func (response PostAuthTelegram400JSONResponse) VisitPostAuthTelegramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthTelegram401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostAuthTelegram401JSONResponse) VisitPostAuthTelegramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthTelegram429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response PostAuthTelegram429JSONResponse) VisitPostAuthTelegramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", fmt.Sprint(response.Headers.XRateLimitLimit))
	w.Header().Set("X-RateLimit-Remaining", fmt.Sprint(response.Headers.XRateLimitRemaining))
	w.Header().Set("X-RateLimit-Reset", fmt.Sprint(response.Headers.XRateLimitReset))
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthTelegram500JSONResponse struct{ InternalErrorJSONResponse }

func (response PostAuthTelegram500JSONResponse) VisitPostAuthTelegramResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesRequestObject struct {
	Params GetCasesParams
}

type GetCasesResponseObject interface {
	VisitGetCasesResponse(w http.ResponseWriter) error
}

type GetCases200JSONResponse struct {
	Items *[]CaseSummary `json:"items,omitempty"`
	Total *int           `json:"total,omitempty"`
}

func (response GetCases200JSONResponse) VisitGetCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCases401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetCases401JSONResponse) VisitGetCasesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesCaseIdRequestObject struct {
	CaseId CaseId `json:"case_id"`
}

type GetCasesCaseIdResponseObject interface {
	VisitGetCasesCaseIdResponse(w http.ResponseWriter) error
}

type GetCasesCaseId200JSONResponse CaseDetails

func (response GetCasesCaseId200JSONResponse) VisitGetCasesCaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesCaseId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetCasesCaseId404JSONResponse) VisitGetCasesCaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostCasesCaseIdOpenRequestObject struct {
	CaseId CaseId `json:"case_id"`
	Params PostCasesCaseIdOpenParams
}

type PostCasesCaseIdOpenResponseObject interface {
	VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error
}

type PostCasesCaseIdOpen200ResponseHeaders struct {
	XRateLimitLimit     int
	XRateLimitRemaining int
	XRateLimitReset     int64
}

type PostCasesCaseIdOpen200JSONResponse struct {
	Body    OpenCaseResponse
	Headers PostCasesCaseIdOpen200ResponseHeaders
}

func (response PostCasesCaseIdOpen200JSONResponse) VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", fmt.Sprint(response.Headers.XRateLimitLimit))
	w.Header().Set("X-RateLimit-Remaining", fmt.Sprint(response.Headers.XRateLimitRemaining))
	w.Header().Set("X-RateLimit-Reset", fmt.Sprint(response.Headers.XRateLimitReset))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostCasesCaseIdOpen401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostCasesCaseIdOpen401JSONResponse) VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCasesCaseIdOpen402JSONResponse Error

func (response PostCasesCaseIdOpen402JSONResponse) VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(402)

	return json.NewEncoder(w).Encode(response)
}

type PostCasesCaseIdOpen404JSONResponse struct{ NotFoundJSONResponse }

func (response PostCasesCaseIdOpen404JSONResponse) VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostCasesCaseIdOpen409JSONResponse Error

func (response PostCasesCaseIdOpen409JSONResponse) VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostCasesCaseIdOpen429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response PostCasesCaseIdOpen429JSONResponse) VisitPostCasesCaseIdOpenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", fmt.Sprint(response.Headers.XRateLimitLimit))
	w.Header().Set("X-RateLimit-Remaining", fmt.Sprint(response.Headers.XRateLimitRemaining))
	w.Header().Set("X-RateLimit-Reset", fmt.Sprint(response.Headers.XRateLimitReset))
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDropsMyRequestObject struct {
	Params GetDropsMyParams
}

type GetDropsMyResponseObject interface {
	VisitGetDropsMyResponse(w http.ResponseWriter) error
}

type GetDropsMy200JSONResponse struct {
	Items *[]Drop `json:"items,omitempty"`
}

func (response GetDropsMy200JSONResponse) VisitGetDropsMyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDropsMy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetDropsMy401JSONResponse) VisitGetDropsMyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse struct {
	Status *string    `json:"status,omitempty"`
	Time   *time.Time `json:"time,omitempty"`
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth503JSONResponse struct{ ServiceUnavailableJSONResponse }

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetInventoryRequestObject struct {
	Params GetInventoryParams
}

type GetInventoryResponseObject interface {
	VisitGetInventoryResponse(w http.ResponseWriter) error
}

type GetInventory200JSONResponse struct {
	Items *[]InventoryItem `json:"items,omitempty"`
}

func (response GetInventory200JSONResponse) VisitGetInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInventory401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetInventory401JSONResponse) VisitGetInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostInventoryDisenchantRequestObject struct {
	Params PostInventoryDisenchantParams
	Body   *PostInventoryDisenchantJSONRequestBody
}

type PostInventoryDisenchantResponseObject interface {
	VisitPostInventoryDisenchantResponse(w http.ResponseWriter) error
}

type PostInventoryDisenchant200JSONResponse struct {
	DustBalance   *int           `json:"dust_balance,omitempty"`
	InventoryItem *InventoryItem `json:"inventory_item,omitempty"`
}

func (response PostInventoryDisenchant200JSONResponse) VisitPostInventoryDisenchantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostInventoryDisenchant400JSONResponse struct{ BadRequestJSONResponse }

func (response PostInventoryDisenchant400JSONResponse) VisitPostInventoryDisenchantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostInventoryDisenchant401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostInventoryDisenchant401JSONResponse) VisitPostInventoryDisenchantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostInventoryDisenchant409JSONResponse Error

func (response PostInventoryDisenchant409JSONResponse) VisitPostInventoryDisenchantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200ResponseHeaders struct {
	XRateLimitLimit     int
	XRateLimitRemaining int
	XRateLimitReset     int64
}

type GetMe200JSONResponse struct {
	Body    MeResponse
	Headers GetMe200ResponseHeaders
}

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", fmt.Sprint(response.Headers.XRateLimitLimit))
	w.Header().Set("X-RateLimit-Remaining", fmt.Sprint(response.Headers.XRateLimitRemaining))
	w.Header().Set("X-RateLimit-Reset", fmt.Sprint(response.Headers.XRateLimitReset))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetMe401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetMe401JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostPaymentsCreateRequestObject struct {
	Params PostPaymentsCreateParams
	Body   *PostPaymentsCreateJSONRequestBody
}

type PostPaymentsCreateResponseObject interface {
	VisitPostPaymentsCreateResponse(w http.ResponseWriter) error
}

type PostPaymentsCreate200JSONResponse PaymentSession

func (response PostPaymentsCreate200JSONResponse) VisitPostPaymentsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPaymentsCreate400JSONResponse struct{ BadRequestJSONResponse }

func (response PostPaymentsCreate400JSONResponse) VisitPostPaymentsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPaymentsCreate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostPaymentsCreate401JSONResponse) VisitPostPaymentsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostPaymentsCreate409JSONResponse PaymentSession

func (response PostPaymentsCreate409JSONResponse) VisitPostPaymentsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostPaymentsWebhookRequestObject struct {
	Body *PostPaymentsWebhookJSONRequestBody
}

type PostPaymentsWebhookResponseObject interface {
	VisitPostPaymentsWebhookResponse(w http.ResponseWriter) error
}

type PostPaymentsWebhook200Response struct {
}

func (response PostPaymentsWebhook200Response) VisitPostPaymentsWebhookResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPaymentsWebhook400JSONResponse struct{ BadRequestJSONResponse }

func (response PostPaymentsWebhook400JSONResponse) VisitPostPaymentsWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPaymentsWebhook401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostPaymentsWebhook401JSONResponse) VisitPostPaymentsWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetShopPacksRequestObject struct {
}

type GetShopPacksResponseObject interface {
	VisitGetShopPacksResponse(w http.ResponseWriter) error
}

type GetShopPacks200JSONResponse struct {
	Items *[]CoinPack `json:"items,omitempty"`
}

func (response GetShopPacks200JSONResponse) VisitGetShopPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Ручная корректировка баланса
	// (POST /admin/balance/adjust)
	PostAdminBalanceAdjust(ctx context.Context, request PostAdminBalanceAdjustRequestObject) (PostAdminBalanceAdjustResponseObject, error)
	// Создать кейс (draft)
	// (POST /admin/cases)
	PostAdminCases(ctx context.Context, request PostAdminCasesRequestObject) (PostAdminCasesResponseObject, error)
	// Обновить метаданные кейса (без дроп‑таблицы)
	// (PUT /admin/cases)
	PutAdminCases(ctx context.Context, request PutAdminCasesRequestObject) (PutAdminCasesResponseObject, error)
	// Создать новую версию дроп‑таблицы кейса
	// (POST /admin/cases/{case_id}/weights)
	PostAdminCasesCaseIdWeights(ctx context.Context, request PostAdminCasesCaseIdWeightsRequestObject) (PostAdminCasesCaseIdWeightsResponseObject, error)
	// Создать предмет (стикер)
	// (POST /admin/items)
	PostAdminItems(ctx context.Context, request PostAdminItemsRequestObject) (PostAdminItemsResponseObject, error)
	// Обновить предмет
	// (PUT /admin/items)
	PutAdminItems(ctx context.Context, request PutAdminItemsRequestObject) (PutAdminItemsResponseObject, error)
	// Создать промокод (однократное начисление)
	// (POST /admin/promos)
	PostAdminPromos(ctx context.Context, request PostAdminPromosRequestObject) (PostAdminPromosResponseObject, error)
	// Бан/заморозка пользователя
	// (POST /admin/users/{user_id}/ban)
	PostAdminUsersUserIdBan(ctx context.Context, request PostAdminUsersUserIdBanRequestObject) (PostAdminUsersUserIdBanResponseObject, error)
	// Снять бан/разморозить пользователя
	// (POST /admin/users/{user_id}/unban)
	PostAdminUsersUserIdUnban(ctx context.Context, request PostAdminUsersUserIdUnbanRequestObject) (PostAdminUsersUserIdUnbanResponseObject, error)
	// Авторизация по Telegram Web Apps init_data
	// (POST /auth/telegram)
	PostAuthTelegram(ctx context.Context, request PostAuthTelegramRequestObject) (PostAuthTelegramResponseObject, error)
	// Список активных кейсов
	// (GET /cases)
	GetCases(ctx context.Context, request GetCasesRequestObject) (GetCasesResponseObject, error)
	// Детали кейса (без точных весов предметов)
	// (GET /cases/{case_id})
	GetCasesCaseId(ctx context.Context, request GetCasesCaseIdRequestObject) (GetCasesCaseIdResponseObject, error)
	// Открыть кейс (идемпотентно)
	// (POST /cases/{case_id}/open)
	PostCasesCaseIdOpen(ctx context.Context, request PostCasesCaseIdOpenRequestObject) (PostCasesCaseIdOpenResponseObject, error)
	// Мои последние дропы
	// (GET /drops/my)
	GetDropsMy(ctx context.Context, request GetDropsMyRequestObject) (GetDropsMyResponseObject, error)
	// Проверка статуса сервиса
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Инвентарь пользователя
	// (GET /inventory)
	GetInventory(ctx context.Context, request GetInventoryRequestObject) (GetInventoryResponseObject, error)
	// Конвертация дубликатов в «пыль» (опциональная механика)
	// (POST /inventory/disenchant)
	PostInventoryDisenchant(ctx context.Context, request PostInventoryDisenchantRequestObject) (PostInventoryDisenchantResponseObject, error)
	// Текущий пользователь — профиль, баланс и краткая статистика
	// (GET /me)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)
	// Создать платежную сессию
	// (POST /payments/create)
	PostPaymentsCreate(ctx context.Context, request PostPaymentsCreateRequestObject) (PostPaymentsCreateResponseObject, error)
	// Вебхук платежного провайдера
	// (POST /payments/webhook)
	PostPaymentsWebhook(ctx context.Context, request PostPaymentsWebhookRequestObject) (PostPaymentsWebhookResponseObject, error)
	// Каталог пакетов монет
	// (GET /shop/packs)
	GetShopPacks(ctx context.Context, request GetShopPacksRequestObject) (GetShopPacksResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAdminBalanceAdjust operation middleware
func (sh *strictHandler) PostAdminBalanceAdjust(w http.ResponseWriter, r *http.Request) {
	var request PostAdminBalanceAdjustRequestObject

	var body PostAdminBalanceAdjustJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminBalanceAdjust(ctx, request.(PostAdminBalanceAdjustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminBalanceAdjust")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminBalanceAdjustResponseObject); ok {
		if err := validResponse.VisitPostAdminBalanceAdjustResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminCases operation middleware
func (sh *strictHandler) PostAdminCases(w http.ResponseWriter, r *http.Request) {
	var request PostAdminCasesRequestObject

	var body PostAdminCasesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminCases(ctx, request.(PostAdminCasesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminCases")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminCasesResponseObject); ok {
		if err := validResponse.VisitPostAdminCasesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAdminCases operation middleware
func (sh *strictHandler) PutAdminCases(w http.ResponseWriter, r *http.Request, params PutAdminCasesParams) {
	var request PutAdminCasesRequestObject

	request.Params = params

	var body PutAdminCasesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutAdminCases(ctx, request.(PutAdminCasesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAdminCases")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutAdminCasesResponseObject); ok {
		if err := validResponse.VisitPutAdminCasesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminCasesCaseIdWeights operation middleware
func (sh *strictHandler) PostAdminCasesCaseIdWeights(w http.ResponseWriter, r *http.Request, caseId CaseId) {
	var request PostAdminCasesCaseIdWeightsRequestObject

	request.CaseId = caseId

	var body PostAdminCasesCaseIdWeightsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminCasesCaseIdWeights(ctx, request.(PostAdminCasesCaseIdWeightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminCasesCaseIdWeights")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminCasesCaseIdWeightsResponseObject); ok {
		if err := validResponse.VisitPostAdminCasesCaseIdWeightsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminItems operation middleware
func (sh *strictHandler) PostAdminItems(w http.ResponseWriter, r *http.Request) {
	var request PostAdminItemsRequestObject

	var body PostAdminItemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminItems(ctx, request.(PostAdminItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminItemsResponseObject); ok {
		if err := validResponse.VisitPostAdminItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAdminItems operation middleware
func (sh *strictHandler) PutAdminItems(w http.ResponseWriter, r *http.Request, params PutAdminItemsParams) {
	var request PutAdminItemsRequestObject

	request.Params = params

	var body PutAdminItemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutAdminItems(ctx, request.(PutAdminItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAdminItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutAdminItemsResponseObject); ok {
		if err := validResponse.VisitPutAdminItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminPromos operation middleware
func (sh *strictHandler) PostAdminPromos(w http.ResponseWriter, r *http.Request) {
	var request PostAdminPromosRequestObject

	var body PostAdminPromosJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminPromos(ctx, request.(PostAdminPromosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminPromos")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminPromosResponseObject); ok {
		if err := validResponse.VisitPostAdminPromosResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminUsersUserIdBan operation middleware
func (sh *strictHandler) PostAdminUsersUserIdBan(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request PostAdminUsersUserIdBanRequestObject

	request.UserId = userId

	var body PostAdminUsersUserIdBanJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminUsersUserIdBan(ctx, request.(PostAdminUsersUserIdBanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminUsersUserIdBan")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminUsersUserIdBanResponseObject); ok {
		if err := validResponse.VisitPostAdminUsersUserIdBanResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAdminUsersUserIdUnban operation middleware
func (sh *strictHandler) PostAdminUsersUserIdUnban(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request PostAdminUsersUserIdUnbanRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminUsersUserIdUnban(ctx, request.(PostAdminUsersUserIdUnbanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminUsersUserIdUnban")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminUsersUserIdUnbanResponseObject); ok {
		if err := validResponse.VisitPostAdminUsersUserIdUnbanResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthTelegram operation middleware
func (sh *strictHandler) PostAuthTelegram(w http.ResponseWriter, r *http.Request) {
	var request PostAuthTelegramRequestObject

	var body PostAuthTelegramJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthTelegram(ctx, request.(PostAuthTelegramRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthTelegram")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthTelegramResponseObject); ok {
		if err := validResponse.VisitPostAuthTelegramResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCases operation middleware
func (sh *strictHandler) GetCases(w http.ResponseWriter, r *http.Request, params GetCasesParams) {
	var request GetCasesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCases(ctx, request.(GetCasesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCases")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCasesResponseObject); ok {
		if err := validResponse.VisitGetCasesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCasesCaseId operation middleware
func (sh *strictHandler) GetCasesCaseId(w http.ResponseWriter, r *http.Request, caseId CaseId) {
	var request GetCasesCaseIdRequestObject

	request.CaseId = caseId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCasesCaseId(ctx, request.(GetCasesCaseIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCasesCaseId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCasesCaseIdResponseObject); ok {
		if err := validResponse.VisitGetCasesCaseIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCasesCaseIdOpen operation middleware
func (sh *strictHandler) PostCasesCaseIdOpen(w http.ResponseWriter, r *http.Request, caseId CaseId, params PostCasesCaseIdOpenParams) {
	var request PostCasesCaseIdOpenRequestObject

	request.CaseId = caseId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCasesCaseIdOpen(ctx, request.(PostCasesCaseIdOpenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCasesCaseIdOpen")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCasesCaseIdOpenResponseObject); ok {
		if err := validResponse.VisitPostCasesCaseIdOpenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDropsMy operation middleware
func (sh *strictHandler) GetDropsMy(w http.ResponseWriter, r *http.Request, params GetDropsMyParams) {
	var request GetDropsMyRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDropsMy(ctx, request.(GetDropsMyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDropsMy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDropsMyResponseObject); ok {
		if err := validResponse.VisitGetDropsMyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInventory operation middleware
func (sh *strictHandler) GetInventory(w http.ResponseWriter, r *http.Request, params GetInventoryParams) {
	var request GetInventoryRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetInventory(ctx, request.(GetInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetInventoryResponseObject); ok {
		if err := validResponse.VisitGetInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostInventoryDisenchant operation middleware
func (sh *strictHandler) PostInventoryDisenchant(w http.ResponseWriter, r *http.Request, params PostInventoryDisenchantParams) {
	var request PostInventoryDisenchantRequestObject

	request.Params = params

	var body PostInventoryDisenchantJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostInventoryDisenchant(ctx, request.(PostInventoryDisenchantRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostInventoryDisenchant")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostInventoryDisenchantResponseObject); ok {
		if err := validResponse.VisitPostInventoryDisenchantResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(w http.ResponseWriter, r *http.Request) {
	var request GetMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx, request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		if err := validResponse.VisitGetMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPaymentsCreate operation middleware
func (sh *strictHandler) PostPaymentsCreate(w http.ResponseWriter, r *http.Request, params PostPaymentsCreateParams) {
	var request PostPaymentsCreateRequestObject

	request.Params = params

	var body PostPaymentsCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPaymentsCreate(ctx, request.(PostPaymentsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPaymentsCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPaymentsCreateResponseObject); ok {
		if err := validResponse.VisitPostPaymentsCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPaymentsWebhook operation middleware
func (sh *strictHandler) PostPaymentsWebhook(w http.ResponseWriter, r *http.Request) {
	var request PostPaymentsWebhookRequestObject

	var body PostPaymentsWebhookJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPaymentsWebhook(ctx, request.(PostPaymentsWebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPaymentsWebhook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPaymentsWebhookResponseObject); ok {
		if err := validResponse.VisitPostPaymentsWebhookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetShopPacks operation middleware
func (sh *strictHandler) GetShopPacks(w http.ResponseWriter, r *http.Request) {
	var request GetShopPacksRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetShopPacks(ctx, request.(GetShopPacksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetShopPacks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetShopPacksResponseObject); ok {
		if err := validResponse.VisitGetShopPacksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
